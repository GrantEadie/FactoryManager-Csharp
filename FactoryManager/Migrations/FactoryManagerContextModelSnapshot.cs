// <auto-generated />
using FactoryManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FactoryManager.Migrations
{
    [DbContext(typeof(FactoryManagerContext))]
    partial class FactoryManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FactoryManager.Models.Engineer", b =>
                {
                    b.Property<int>("EngineerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EngineerExperience");

                    b.Property<string>("EngineerName");

                    b.Property<string>("EngineerSpecialty");

                    b.HasKey("EngineerId");

                    b.ToTable("Engineers");
                });

            modelBuilder.Entity("FactoryManager.Models.EngineerIncident", b =>
                {
                    b.Property<int>("EngineerIncidentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EngineerId");

                    b.Property<int>("IncidentId");

                    b.HasKey("EngineerIncidentId");

                    b.HasIndex("EngineerId");

                    b.HasIndex("IncidentId");

                    b.ToTable("EngineerIncident");
                });

            modelBuilder.Entity("FactoryManager.Models.EngineerMachine", b =>
                {
                    b.Property<int>("EngineerMachineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EngineerId");

                    b.Property<int>("MachineId");

                    b.HasKey("EngineerMachineId");

                    b.HasIndex("EngineerId");

                    b.HasIndex("MachineId");

                    b.ToTable("EngineerMachine");
                });

            modelBuilder.Entity("FactoryManager.Models.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IncidentDamage");

                    b.Property<string>("IncidentTitle");

                    b.Property<int>("LocationId");

                    b.HasKey("IncidentId");

                    b.HasIndex("LocationId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("FactoryManager.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LocationName");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FactoryManager.Models.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LocationId");

                    b.Property<string>("MachineBrand");

                    b.Property<string>("MachineDescription");

                    b.Property<string>("MachineName");

                    b.HasKey("MachineId");

                    b.HasIndex("LocationId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("FactoryManager.Models.MachineIncident", b =>
                {
                    b.Property<int>("MachineIncidentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IncidentId");

                    b.Property<int>("MachineId");

                    b.HasKey("MachineIncidentId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("MachineId");

                    b.ToTable("MachineIncident");
                });

            modelBuilder.Entity("FactoryManager.Models.EngineerIncident", b =>
                {
                    b.HasOne("FactoryManager.Models.Engineer", "Engineer")
                        .WithMany("Engineers")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FactoryManager.Models.Incident", "Incident")
                        .WithMany("Engineers")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FactoryManager.Models.EngineerMachine", b =>
                {
                    b.HasOne("FactoryManager.Models.Engineer", "Engineer")
                        .WithMany("Machines")
                        .HasForeignKey("EngineerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FactoryManager.Models.Machine", "Machine")
                        .WithMany("Engineers")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FactoryManager.Models.Incident", b =>
                {
                    b.HasOne("FactoryManager.Models.Location", "Location")
                        .WithMany("Incidents")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FactoryManager.Models.Machine", b =>
                {
                    b.HasOne("FactoryManager.Models.Location", "Location")
                        .WithMany("Machines")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FactoryManager.Models.MachineIncident", b =>
                {
                    b.HasOne("FactoryManager.Models.Incident", "Incident")
                        .WithMany("Machines")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FactoryManager.Models.Machine", "Machine")
                        .WithMany("Incidents")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
